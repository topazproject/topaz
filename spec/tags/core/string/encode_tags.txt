fails:String#encode when passed no options transcodes to Encoding.default_internal when set
fails:String#encode when passed no options transcodes a 7-bit String despite no generic converting being available
fails:String#encode when passed no options raises an Encoding::ConverterNotFoundError when no conversion is possible
fails:String#encode when passed to encoding accepts a String argument
fails:String#encode when passed to encoding calls #to_str to convert the object to an Encoding
fails:String#encode when passed to encoding transcodes to the passed encoding
fails:String#encode when passed to encoding transcodes a 7-bit String despite no generic converting being available
fails:String#encode when passed to encoding raises an Encoding::ConverterNotFoundError when no conversion is possible
fails:String#encode when passed to encoding raises an Encoding::ConverterNotFoundError for an invalid encoding
fails:String#encode when passed options does not process transcoding options if not transcoding
fails:String#encode when passed options calls #to_hash to convert the object
fails:String#encode when passed options transcodes to Encoding.default_internal when set
fails:String#encode when passed options raises an Encoding::ConverterNotFoundError when no conversion is possible despite ':invalid => :replace, :undef => :replace'
fails:String#encode when passed to, from transcodes between the encodings ignoring the String encoding
fails:String#encode when passed to, from calls #to_str to convert the from object to an Encoding
fails:String#encode when passed to, options replaces undefined characters in the destination encoding
fails:String#encode when passed to, options replaces invalid characters in the destination encoding
fails:String#encode when passed to, options calls #to_hash to convert the options object
fails:String#encode when passed to, from, options replaces undefined characters in the destination encoding
fails:String#encode when passed to, from, options replaces invalid characters in the destination encoding
fails:String#encode when passed to, from, options calls #to_str to convert the to object to an encoding
fails:String#encode when passed to, from, options calls #to_str to convert the from object to an encoding
fails:String#encode when passed to, from, options calls #to_hash to convert the options object
fails:String#encode given the :xml => :text option replaces all instances of '&' with '&amp;'
fails:String#encode given the :xml => :text option replaces all instances of '<' with '&lt;'
fails:String#encode given the :xml => :text option replaces all instances of '>' with '&gt;'
fails:String#encode given the :xml => :text option does not replace '"'
fails:String#encode given the :xml => :text option replaces undefined characters with their upper-case hexadecimal numeric character references
fails:String#encode given the :xml => :attr option surrounds the encoded text with double-quotes
fails:String#encode given the :xml => :attr option replaces all instances of '&' with '&amp;'
fails:String#encode given the :xml => :attr option replaces all instances of '<' with '&lt;'
fails:String#encode given the :xml => :attr option replaces all instances of '>' with '&gt;'
fails:String#encode given the :xml => :attr option replaces all instances of '"' with '&quot;'
fails:String#encode given the :xml => :attr option replaces undefined characters with their upper-case hexadecimal numeric character references
fails:String#encode when passed no options returns a copy when Encoding.default_internal is nil
fails:String#encode when passed no options returns a copy for a ASCII-only String when Encoding.default_internal is nil
fails:String#encode when passed no options encodes an ascii substring of a binary string to UTF-8
fails:String#encode when passed to encoding returns a copy when passed the same encoding as the String
fails:String#encode when passed to encoding round trips a String
fails:String#encode when passed options returns a copy when Encoding.default_internal is nil
fails:String#encode when passed to, from returns a copy when both encodings are the same
fails:String#encode when passed to, options returns a copy when the destination encoding is the same as the String encoding
fails:String#encode when passed to, from, options returns a copy when both encodings are the same
fails:String#encode! raises ArgumentError if the value of the :xml option is not :text or :attr
fails:String#encode! raises a RuntimeError when called on a frozen String
fails:String#encode! raises a RuntimeError when called on a frozen String when it's a no-op
fails:String#encode! when passed no options transcodes to Encoding.default_internal when set
fails:String#encode! when passed no options transcodes a 7-bit String despite no generic converting being available
fails:String#encode! when passed no options raises an Encoding::ConverterNotFoundError when no conversion is possible
fails:String#encode! when passed to encoding accepts a String argument
fails:String#encode! when passed to encoding calls #to_str to convert the object to an Encoding
fails:String#encode! when passed to encoding transcodes to the passed encoding
fails:String#encode! when passed to encoding transcodes a 7-bit String despite no generic converting being available
fails:String#encode! when passed to encoding raises an Encoding::ConverterNotFoundError when no conversion is possible
fails:String#encode! when passed to encoding raises an Encoding::ConverterNotFoundError for an invalid encoding
fails:String#encode! when passed options does not process transcoding options if not transcoding
fails:String#encode! when passed options calls #to_hash to convert the object
fails:String#encode! when passed options transcodes to Encoding.default_internal when set
fails:String#encode! when passed options raises an Encoding::ConverterNotFoundError when no conversion is possible despite ':invalid => :replace, :undef => :replace'
fails:String#encode! when passed to, from transcodes between the encodings ignoring the String encoding
fails:String#encode! when passed to, from calls #to_str to convert the from object to an Encoding
fails:String#encode! when passed to, options replaces undefined characters in the destination encoding
fails:String#encode! when passed to, options replaces invalid characters in the destination encoding
fails:String#encode! when passed to, options calls #to_hash to convert the options object
fails:String#encode! when passed to, from, options replaces undefined characters in the destination encoding
fails:String#encode! when passed to, from, options replaces invalid characters in the destination encoding
fails:String#encode! when passed to, from, options calls #to_str to convert the to object to an encoding
fails:String#encode! when passed to, from, options calls #to_str to convert the from object to an encoding
fails:String#encode! when passed to, from, options calls #to_hash to convert the options object
fails:String#encode! given the :xml => :text option replaces all instances of '&' with '&amp;'
fails:String#encode! given the :xml => :text option replaces all instances of '<' with '&lt;'
fails:String#encode! given the :xml => :text option replaces all instances of '>' with '&gt;'
fails:String#encode! given the :xml => :text option does not replace '"'
fails:String#encode! given the :xml => :text option replaces undefined characters with their upper-case hexadecimal numeric character references
fails:String#encode! given the :xml => :attr option surrounds the encoded text with double-quotes
fails:String#encode! given the :xml => :attr option replaces all instances of '&' with '&amp;'
fails:String#encode! given the :xml => :attr option replaces all instances of '<' with '&lt;'
fails:String#encode! given the :xml => :attr option replaces all instances of '>' with '&gt;'
fails:String#encode! given the :xml => :attr option replaces all instances of '"' with '&quot;'
fails:String#encode! given the :xml => :attr option replaces undefined characters with their upper-case hexadecimal numeric character references
fails:String#encode! when passed no options returns self when Encoding.default_internal is nil
fails:String#encode! when passed no options returns self for a ASCII-only String when Encoding.default_internal is nil
fails:String#encode! when passed to encoding returns self
fails:String#encode! when passed to, from returns self
fails:String#encode! when passed no options returns self when Encoding.default_internal is nil

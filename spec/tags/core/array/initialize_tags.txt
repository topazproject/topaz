fails:Array#initialize is private
fails:Array#initialize is called on subclasses
fails:Array#initialize preserves the object's identity even when changing its value
fails:Array#initialize raises a RuntimeError on frozen arrays
fails:Array#initialize with no arguments makes the array empty
fails:Array#initialize with (array) replaces self with the other array
fails:Array#initialize with (array) calls #to_ary to convert the value to an array
fails:Array#initialize with (array) does not call #to_ary on instances of Array or subclasses of Array
fails:Array#initialize with (array) raises a TypeError if an Array type argument and a default object
fails:Array#initialize with (size, object=nil) sets the array to size and fills with the object
fails:Array#initialize with (size, object=nil) sets the array to size and fills with nil when object is omitted
fails:Array#initialize with (size, object=nil) raises an ArgumentError if size is too large
fails:Array#initialize with (size, object=nil) calls #to_int to convert the size argument to an Integer when object is given
fails:Array#initialize with (size, object=nil) calls #to_int to convert the size argument to an Integer when object is not given
fails:Array#initialize with (size, object=nil) raises a TypeError if the size argument is not an Integer type
fails:Array#initialize with (size, object=nil) yields the index of the element and sets the element to the value of the block
fails:Array#initialize with (size, object=nil) uses the block value instead of using the default value
fails:Array#initialize with (size, object=nil) returns the value passed to break
fails:Array#initialize with (size, object=nil) sets the array to the values returned by the block before break is executed
fails: 

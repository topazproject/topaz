fails:Module#autoload? returns the name of the file that will be autoloaded
fails:Module#autoload? returns nil if no file has been registered for a constant
fails:Module#autoload registers a file to load the first time the named constant is accessed
fails:Module#autoload sets the autoload constant in the constants table
fails:Module#autoload loads the registered constant when it is accessed
fails:Module#autoload loads the registered constant into a dynamically created class
fails:Module#autoload loads the registered constant into a dynamically created module
fails:Module#autoload loads the registered constant when it is opened as a class
fails:Module#autoload loads the registered constant when it is opened as a module
fails:Module#autoload loads the registered constant when it is inherited from
fails:Module#autoload loads the registered constant when it is included
fails:Module#autoload does not load the file when the constant is already set
fails:Module#autoload loads a file with .rb extension when passed the name without the extension
fails:Module#autoload does not load the file if the file is manually required
fails:Module#autoload ignores the autoload request if the file is already loaded
fails:Module#autoload retains the autoload even if the request to require fails
fails:Module#autoload allows multiple autoload constants for a single file
fails:Module#autoload runs for an exception condition class and doesn't trample the exception
fails:Module#autoload does not load the file when refering to the constant in defined?
fails:Module#autoload does not remove the constant from the constant table if load fails
fails:Module#autoload does not remove the constant from the constant table if the loaded files does not define it
fails:Module#autoload return 'constant' on refering the constant with defined?()
fails:Module#autoload does not load the file when removing an autoload constant
fails:Module#autoload does not load the file when accessing the constants table of the module
fails:Module#autoload loads the file when opening a module that is the autoloaded constant
fails:Module#autoload loads the file that defines subclass XX::YY < YY and YY is a top level constant
fails:Module#autoload looks up the constant in the scope where it is referred
fails:Module#autoload looks up the constant when in a meta class scope
fails:Module#autoload does NOT raise a NameError when the autoload file did not define the constant and a module is opened with the same name
fails:Module#autoload calls #to_path on non-string filenames
fails:Module#autoload raises an ArgumentError when an empty filename is given
fails:Module#autoload shares the autoload request across dup'ed copies of modules
fails:Module#autoload raises a TypeError if opening a class with a different superclass than the class defined in the autoload file
fails:Module#autoload raises a TypeError if not passed a String or object respodning to #to_path for the filename
fails:Module#autoload calls #to_path on non-String filename arguments
fails:Module#autoload (concurrently) blocks a second thread while a first is doing the autoload
fails:Module#autoload does not call Kernel#require or Kernel#load dynamically
fails:Module#autoload returns 'constant' on refering the constant with defined?()
fails:Module#autoload on a frozen module raises a RuntimeError before setting the name
fails:Module#autoload when changing $LOAD_PATH does not reload a file due to a different load path
fails:Module#autoload (concurrently) blocks others threads while doing an autoload

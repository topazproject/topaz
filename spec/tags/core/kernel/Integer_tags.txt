fails:Kernel.Integer uncritically return the value of to_int even if it is not an Integer
fails:Kernel.Integer raises a TypeError when passed nil
fails:Kernel.Integer returns a Fixnum or Bignum object
fails:Kernel.Integer calls to_i on Rationals
fails:Kernel.Integer returns the value of to_int if the result is a Fixnum
fails:Kernel.Integer returns the value of to_int if the result is a Bignum
fails:Kernel.Integer calls to_i on an object whose to_int returns nil
fails:Kernel.Integer raises a TypeError if to_i returns a value that is not an Integer
fails:Kernel.Integer raises a TypeError if no to_int or to_i methods exist
fails:Kernel.Integer raises a TypeError if to_int returns nil and no to_i exists
fails:Kernel.Integer raises a FloatDomainError when passed NaN
fails:Kernel.Integer raises a FloatDomainError when passed Infinity
fails:Kernel.Integer raises an ArgumentError if the String is a null byte
fails:Kernel.Integer raises an ArgumentError if the String starts with a null byte
fails:Kernel.Integer raises an ArgumentError if the String ends with a null byte
fails:Kernel.Integer raises an ArgumentError if the String contains a null byte
fails:Kernel.Integer raises an ArgumentError if there are leading _s
fails:Kernel.Integer raises an ArgumentError if there are trailing _s
fails:Kernel.Integer raises an ArgumentError if there are multiple embedded _s
fails:Kernel.Integer ignores a single leading +
fails:Kernel.Integer raises an ArgumentError if there is a space between the + and number
fails:Kernel.Integer raises an ArgumentError if there are multiple leading +s
fails:Kernel.Integer raises an ArgumentError if there are trailing +s
fails:Kernel.Integer raises an ArgumentError if there are multiple leading -s
fails:Kernel.Integer raises an ArgumentError if there are trailing -s
fails:Kernel.Integer raises an ArgumentError if there is a period
fails:Kernel.Integer raises an ArgumentError for an empty String
fails:Kernel.Integer parses the value as a hex number if there's a leading 0x
fails:Kernel.Integer is a positive hex number if there's a leading +0x
fails:Kernel.Integer is a negative hex number if there's a leading -0x
fails:Kernel.Integer raises an ArgumentError if the number cannot be parsed as hex
fails:Kernel.Integer parses the value as a hex number if there's a leading 0X
fails:Kernel.Integer is a positive hex number if there's a leading +0X
fails:Kernel.Integer is a negative hex number if there's a leading -0X
fails:Kernel.Integer parses the value as a binary number if there's a leading 0b
fails:Kernel.Integer is a positive binary number if there's a leading +0b
fails:Kernel.Integer is a negative binary number if there's a leading -0b
fails:Kernel.Integer raises an ArgumentError if the number cannot be parsed as binary
fails:Kernel.Integer parses the value as a binary number if there's a leading 0B
fails:Kernel.Integer is a positive binary number if there's a leading +0B
fails:Kernel.Integer is a negative binary number if there's a leading -0B
fails:Kernel.Integer parses the value as an octal number if there's a leading 0o
fails:Kernel.Integer is a positive octal number if there's a leading +0o
fails:Kernel.Integer is a negative octal number if there's a leading -0o
fails:Kernel.Integer raises an ArgumentError if the number cannot be parsed as octal
fails:Kernel.Integer parses the value as an octal number if there's a leading 0O
fails:Kernel.Integer is a positive octal number if there's a leading +0O
fails:Kernel.Integer is a negative octal number if there's a leading -0O
fails:Kernel.Integer parses the value as an octal number if there's a leading 0
fails:Kernel.Integer is a positive octal number if there's a leading +0
fails:Kernel.Integer is a negative octal number if there's a leading -0
fails:Kernel.Integer parses the value as a decimal number if there's a leading 0D
fails:Kernel.Integer is a positive decimal number if there's a leading +0D
fails:Kernel.Integer is a negative decimal number if there's a leading -0D
fails:Kernel.Integer raises an ArgumentError if the number cannot be parsed as decimal
fails:Kernel.Integer parses the value as a decimal number if there's a leading 0d
fails:Kernel.Integer is a positive decimal number if there's a leading +0d
fails:Kernel.Integer is a negative decimal number if there's a leading -0d
fails:Kernel.Integer ignores leading whitespace
fails:Kernel.Integer ignores trailing whitespace
fails:Kernel.Integer ignores an embedded _
fails:Kernel.Integer makes the number negative if there's a leading -
fails:Kernel.Integer accepts wholly lowercase alphabetic strings for bases > 10
fails:Kernel.Integer accepts wholly uppercase alphabetic strings for bases > 10
fails:Kernel.Integer accepts mixed-case alphabetic strings for bases > 10
fails:Kernel.Integer accepts alphanumeric strings for bases > 10
fails:Kernel.Integer parses the value as a hex number if there's a leading 0x and a base of 16
fails:Kernel.Integer is a positive hex number if there's a leading +0x and base of 16
fails:Kernel.Integer is a negative hex number if there's a leading -0x and a base of 16
fails:Kernel.Integer parses the value as a hex number if there's a leading 0X and a base of 16
fails:Kernel.Integer is a positive hex number if there's a leading +0X and base of 16
fails:Kernel.Integer is a negative hex number if there's a leading -0X and a base of 16
fails:Kernel.Integer parses the value as a binary number if there's a leading 0b and the base is 2
fails:Kernel.Integer is a positive binary number if there's a leading +0b and a base of 2
fails:Kernel.Integer is a negative binary number if there's a leading -0b and a base of 2
fails:Kernel.Integer parses the value as a binary number if there's a leading 0B and the base is 2
fails:Kernel.Integer is a positive binary number if there's a leading +0B and a base of 2
fails:Kernel.Integer is a negative binary number if there's a leading -0B and a base of 2
fails:Kernel.Integer parses the value as an octal number if there's a leading 0o and a base of 8
fails:Kernel.Integer is a positive octal number if there's a leading +0o and a base of 8
fails:Kernel.Integer is a negative octal number if there's a leading -0o and a base of 8
fails:Kernel.Integer parses the value as an octal number if there's a leading 0O and a base of 8
fails:Kernel.Integer is a positive octal number if there's a leading +0O and a base of 8
fails:Kernel.Integer is a negative octal number if there's a leading -0O and a base of 8
fails:Kernel.Integer parses the value as a decimal number if there's a leading 0D and a base of 10
fails:Kernel.Integer is a positive decimal number if there's a leading +0D and a base of 10
fails:Kernel.Integer is a negative decimal number if there's a leading -0D and a base of 10
fails:Kernel.Integer parses the value as a decimal number if there's a leading 0d and a base of 10
fails:Kernel.Integer is a positive decimal number if there's a leading +0d and a base of 10
fails:Kernel.Integer is a negative decimal number if there's a leading -0d and a base of 10
fails:Kernel#Integer uncritically return the value of to_int even if it is not an Integer
fails:Kernel#Integer raises a TypeError when passed nil
fails:Kernel#Integer returns a Fixnum or Bignum object
fails:Kernel#Integer calls to_i on Rationals
fails:Kernel#Integer returns the value of to_int if the result is a Fixnum
fails:Kernel#Integer returns the value of to_int if the result is a Bignum
fails:Kernel#Integer calls to_i on an object whose to_int returns nil
fails:Kernel#Integer raises a TypeError if to_i returns a value that is not an Integer
fails:Kernel#Integer raises a TypeError if no to_int or to_i methods exist
fails:Kernel#Integer raises a TypeError if to_int returns nil and no to_i exists
fails:Kernel#Integer raises a FloatDomainError when passed NaN
fails:Kernel#Integer raises a FloatDomainError when passed Infinity
fails:Kernel#Integer raises an ArgumentError if the String is a null byte
fails:Kernel#Integer raises an ArgumentError if the String starts with a null byte
fails:Kernel#Integer raises an ArgumentError if the String ends with a null byte
fails:Kernel#Integer raises an ArgumentError if the String contains a null byte
fails:Kernel#Integer raises an ArgumentError if there are leading _s
fails:Kernel#Integer raises an ArgumentError if there are trailing _s
fails:Kernel#Integer raises an ArgumentError if there are multiple embedded _s
fails:Kernel#Integer ignores a single leading +
fails:Kernel#Integer raises an ArgumentError if there is a space between the + and number
fails:Kernel#Integer raises an ArgumentError if there are multiple leading +s
fails:Kernel#Integer raises an ArgumentError if there are trailing +s
fails:Kernel#Integer raises an ArgumentError if there are multiple leading -s
fails:Kernel#Integer raises an ArgumentError if there are trailing -s
fails:Kernel#Integer raises an ArgumentError if there is a period
fails:Kernel#Integer raises an ArgumentError for an empty String
fails:Kernel#Integer parses the value as a hex number if there's a leading 0x
fails:Kernel#Integer is a positive hex number if there's a leading +0x
fails:Kernel#Integer is a negative hex number if there's a leading -0x
fails:Kernel#Integer raises an ArgumentError if the number cannot be parsed as hex
fails:Kernel#Integer parses the value as a hex number if there's a leading 0X
fails:Kernel#Integer is a positive hex number if there's a leading +0X
fails:Kernel#Integer is a negative hex number if there's a leading -0X
fails:Kernel#Integer parses the value as a binary number if there's a leading 0b
fails:Kernel#Integer is a positive binary number if there's a leading +0b
fails:Kernel#Integer is a negative binary number if there's a leading -0b
fails:Kernel#Integer raises an ArgumentError if the number cannot be parsed as binary
fails:Kernel#Integer parses the value as a binary number if there's a leading 0B
fails:Kernel#Integer is a positive binary number if there's a leading +0B
fails:Kernel#Integer is a negative binary number if there's a leading -0B
fails:Kernel#Integer parses the value as an octal number if there's a leading 0o
fails:Kernel#Integer is a positive octal number if there's a leading +0o
fails:Kernel#Integer is a negative octal number if there's a leading -0o
fails:Kernel#Integer raises an ArgumentError if the number cannot be parsed as octal
fails:Kernel#Integer parses the value as an octal number if there's a leading 0O
fails:Kernel#Integer is a positive octal number if there's a leading +0O
fails:Kernel#Integer is a negative octal number if there's a leading -0O
fails:Kernel#Integer parses the value as an octal number if there's a leading 0
fails:Kernel#Integer is a positive octal number if there's a leading +0
fails:Kernel#Integer is a negative octal number if there's a leading -0
fails:Kernel#Integer parses the value as a decimal number if there's a leading 0D
fails:Kernel#Integer is a positive decimal number if there's a leading +0D
fails:Kernel#Integer is a negative decimal number if there's a leading -0D
fails:Kernel#Integer raises an ArgumentError if the number cannot be parsed as decimal
fails:Kernel#Integer parses the value as a decimal number if there's a leading 0d
fails:Kernel#Integer is a positive decimal number if there's a leading +0d
fails:Kernel#Integer is a negative decimal number if there's a leading -0d
fails:Kernel#Integer ignores leading whitespace
fails:Kernel#Integer ignores trailing whitespace
fails:Kernel#Integer ignores an embedded _
fails:Kernel#Integer makes the number negative if there's a leading -
fails:Kernel#Integer accepts wholly lowercase alphabetic strings for bases > 10
fails:Kernel#Integer accepts wholly uppercase alphabetic strings for bases > 10
fails:Kernel#Integer accepts mixed-case alphabetic strings for bases > 10
fails:Kernel#Integer accepts alphanumeric strings for bases > 10
fails:Kernel#Integer parses the value as a hex number if there's a leading 0x and a base of 16
fails:Kernel#Integer is a positive hex number if there's a leading +0x and base of 16
fails:Kernel#Integer is a negative hex number if there's a leading -0x and a base of 16
fails:Kernel#Integer parses the value as a hex number if there's a leading 0X and a base of 16
fails:Kernel#Integer is a positive hex number if there's a leading +0X and base of 16
fails:Kernel#Integer is a negative hex number if there's a leading -0X and a base of 16
fails:Kernel#Integer parses the value as a binary number if there's a leading 0b and the base is 2
fails:Kernel#Integer is a positive binary number if there's a leading +0b and a base of 2
fails:Kernel#Integer is a negative binary number if there's a leading -0b and a base of 2
fails:Kernel#Integer parses the value as a binary number if there's a leading 0B and the base is 2
fails:Kernel#Integer is a positive binary number if there's a leading +0B and a base of 2
fails:Kernel#Integer is a negative binary number if there's a leading -0B and a base of 2
fails:Kernel#Integer parses the value as an octal number if there's a leading 0o and a base of 8
fails:Kernel#Integer is a positive octal number if there's a leading +0o and a base of 8
fails:Kernel#Integer is a negative octal number if there's a leading -0o and a base of 8
fails:Kernel#Integer parses the value as an octal number if there's a leading 0O and a base of 8
fails:Kernel#Integer is a positive octal number if there's a leading +0O and a base of 8
fails:Kernel#Integer is a negative octal number if there's a leading -0O and a base of 8
fails:Kernel#Integer parses the value as a decimal number if there's a leading 0D and a base of 10
fails:Kernel#Integer is a positive decimal number if there's a leading +0D and a base of 10
fails:Kernel#Integer is a negative decimal number if there's a leading -0D and a base of 10
fails:Kernel#Integer parses the value as a decimal number if there's a leading 0d and a base of 10
fails:Kernel#Integer is a positive decimal number if there's a leading +0d and a base of 10
fails:Kernel#Integer is a negative decimal number if there's a leading -0d and a base of 10
fails:Kernel#Integer raises an ArgumentError if the String ends with a null byte
fails:Kernel#Integer raises an ArgumentError if the String contains a null byte

fails:Array.new returns an instance of a subclass
fails:Array.new with (array) returns an array initialized to the other array
fails:Array.new with (array) does not use the given block
fails:Array.new with (array) calls #to_ary to convert the value to an array
fails:Array.new with (array) does not call #to_ary on instances of Array or subclasses of Array
fails:Array.new with (array) raises a TypeError if an Array type argument and a default object
fails:Array.new with (size, object=nil) returns an array of size filled with object
fails:Array.new with (size, object=nil) returns an array of size filled with nil when object is omitted
fails:Array.new with (size, object=nil) raises an ArgumentError if size is too large
fails:Array.new with (size, object=nil) calls #to_int to convert the size argument to an Integer when object is given
fails:Array.new with (size, object=nil) calls #to_int to convert the size argument to an Integer when object is not given
fails:Array.new with (size, object=nil) raises a TypeError if the size argument is not an Integer type
fails:Array.new with (size, object=nil) yields the index of the element and sets the element to the value of the block
fails:Array.new with (size, object=nil) uses the block value instead of using the default value
fails:Array.new with (size, object=nil) returns the value passed to break
fails:Array.new with (size, object=nil) raises an ArgumentError if size is negative
fails:Array.new with no arguments does not use the given block
fails:Array.new with no arguments returns an empty array
fails:Array.new raise an ArgumentError if passed 3 or more arguments
fails:Array.new returns an instance of Array

